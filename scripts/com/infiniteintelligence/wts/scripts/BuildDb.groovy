/**
 * This groovy script is used to rebuild the database from scratch. It executes the ddl created by schema-export, plus
 * any other SQL script that is listed in the 'ddl' list (e.g., indexes and any other object not created by Grails
 * in schema-export.)
 *
 * This script is run with 'run-script' as follows: [environment] run-script scripts/gov/epa/otaq/fuels/ffars/scripts/BuildDb.groovy
 */

package com.infiniteintelligence.wts.scripts

import grails.plugin.springsecurity.SpringSecurityUtils
import grails.util.Environment
import grails.util.Holders
import groovy.sql.Sql
import org.apache.commons.logging.LogFactory
import org.codehaus.groovy.grails.commons.GrailsApplication

// Script begins here:
main()

/**
 * Script's simulated main().
 */
def main() {

    // Get a logger, and make it a property of the script's class to make it available to all methods in the script.
    this.metaClass.log = LogFactory.getLog(getClass())
    log.info '---------- BuildDb.groovy: BEGIN -----------'
    log.info "Running script class '${this.class.name}' in package '${this.class?.package?.name}'"

    // Get an SQL instance, and make it a property of the script's class too.
    this.metaClass.sql = new Sql(ctx.dataSource)

    ConfigObject dataSourceConfig = Holders.config.dataSource

    printDataSourceConfig(dataSourceConfig)

    def currentDir = new File(".").getCanonicalPath()
    log.info "This script's current directory is $currentDir"

    def ddl = [
            // DDL generated by Grails from the domain classes:
            'grails-schema-export-ddl', // Run this script first!

            // Additional DDL that Grails did not generate
            // Listed by alphabetical order or logical groupings, unless dependencies between the scripts require a different order
            // (Please document any dependency)
    ]

    def views = [
    ]

    def procedures = [
    ]

    def metadata = [

            // Meta data (e.g., code tables)
            // Listed by alphabetical order, unless dependencies between the scripts require a different order
            // (Please document any dependency)
    ]

    sql.withTransaction {

        // Drop all objects
        dropAllObjects()

        // Create the DDL:
        ddl.each { filename ->
            def script = "./db/ddl/${filename}.sql"
            log.info "Executing $script ..."
            int errorCount = executeSqlScriptByStatement(script)
            if (errorCount > 0) {
                throw new RuntimeException("The execution of $script encountered $errorCount error(s).")
            }
        }

        // Create the views
        views.each { filename ->
            String scriptFileName = "./db/ddl/views/${filename}.sql"
            log.info "Executing $scriptFileName ..."
            String scriptText = new File(scriptFileName).text
            sql.execute scriptText
        }

        // Create the procedures
        procedures.each { filename ->
            String scriptFileName = "./db/ddl/procedures/${filename}.sql"
            log.info "Executing $scriptFileName ..."
            String scriptText = new File(scriptFileName).text
            sql.execute scriptText
        }

//        createForeignKeyIndexes(dataSourceConfig.username)
//
//        createRolesAndSystemAccount()
//
//        createTestUsers()
//
//        // Load the application's parameters
//        loadParameters()
//
//        // Initialize sequence generators
//        initializeSequenceGenerators()

        // Load the metadata from SQL scripts:
        metadata.each { table ->

            def script = "./db/metadata/${table}.sql"
            int errorCount = executeSqlScriptByLine(script)
            if (errorCount > 0) {
                throw new RuntimeException("The execution of $script encountered $errorCount error(s).")
            }
        }
    }

    printDataSourceConfig(dataSourceConfig)
    sql.close()

    log.info '---------- BuildDb.groovy: END -----------'
}

/**
 * Log the data source information.
 */
def printDataSourceConfig(ConfigObject dataSourceConfig) {
    log.info "Environment: ${Environment.current}, url=${dataSourceConfig.url}, username=${dataSourceConfig.username}, password=${dataSourceConfig.password}, driver=${dataSourceConfig.driverClassName}"
}

/**
 * Drop all schema objects.
 */
def dropAllObjects() {
    try {
        log.info 'Dropping all objects...'
        sql.call('{call purge_db_schema()}')
        log.info 'Dropping all objects done.'
    } catch (e) {
        log.error "dropAllObjects(): An exception occurred: ${e.message}"
    }
}

//
///**
// * Create foreign key indexes.
// */
//def createForeignKeyIndexes(String owner) {
//    try {
//        log.info 'Initializing foreign key index table...'
//        sql.call('{call p_init_fk_index_table(?)}', [owner])
//        log.info 'Initializing foreign key index table done.'
//        log.info 'Marking missing foreign key indexes...'
//        sql.call('{call p_mark_missing_fk_indexes(?)}', [owner])
//        log.info 'Marking missing foreign key indexes done.'
//        log.info 'Creating foreign key indexes...'
//        sql.call('{call p_create_fk_indexes()}')
//        log.info 'Creating foreign key indexes done.'
//    } catch (e) {
//        log.error "createForeignKeyIndexes(): An exception occurred: ${e.message}"
//    }
//}
//
///**
// * Execute a SQL script file, a single SQL statement at a time. The statements delimiter is the ';'.
// *
// * ATTENTION: THIS DOES NOT WORK IF THE STATEMENT CONTAINS A TEXT LITERAL THAT CONTAINS one or more ';'!
// * @param scriptFileName Script file to execute.
// * @return The number of errors encountered.
// */
//int executeSqlScriptByStatement(String scriptFileName) {
//
//    int count = 0 // SQL statements
//    int countExecuted = 0 // SQL statements executed
//    int errorCount = 0 // Error count
//
//    log.info "Executing $scriptFileName ..."
//
//    String ddl = new File(scriptFileName).text
//
//    StringBuilder buffer = new StringBuilder()
//
//    for (int i = 0; i < ddl.size(); i++) {
//        if (ddl[i] == ';') {
//            // Found semi-colon, execute the statement up to now.
//            String sqlStatement = buffer.toString().trim()
//            if (sqlStatement.startsWith('drop')) {
//                log.debug "Skipping drop statement ($sqlStatement)"
//            } else if (sqlStatement.startsWith('create table v_')) {
//                log.debug "Skipping create statement for views ($sqlStatement)"
//            } else if (sqlStatement.startsWith('alter table v_')) {
//                log.debug "Skipping alter statement for views ($sqlStatement)"
//            } else {
//                log.trace "Execute: '${sqlStatement}'"
//                try {
//                    count++;
//                    sql.execute(sqlStatement)
//                    countExecuted++
//                } catch (e) {
//                    String errorMsg = "An exception occurred at offset ${i + 1} with statement '$sqlStatement': ${e.message}"
//                    if (e.message.contains('ORA-01408: such column list already indexed') ||
//                            e.message.contains('ORA-02261: such unique or primary key already exists in the table')) {
//                        // Grails already has the unique or primary key, or index declared in its generated DDL script
//                        log.warn errorMsg
//                    } else {
//                        errorCount++
//                        log.error errorMsg
//                        log.info "Proceeding..."
//                    }
//                }
//            }
//
//            // Reset buffer
//            buffer.setLength(0)
//        } else {
//            buffer.append(ddl[i])
//        }
//    }
//
//    log.info "Execution of $scriptFileName done: $countExecuted out of $count statements executed; $errorCount error(s) encountered."
//    errorCount
//}
//
///**
// * Execute a SQL Script assuming a line-by-line single statement execution.
// * Each line must be terminated by a ';'.
// * @param scriptFileName
// * @return
// */
//int executeSqlScriptByLine(String scriptFileName) {
//
//    int count = 0 // SQL statements executed
//    int errorCount = 0 // Error count
//    int lineCount = 0 // Line count
//
//    log.info "Executing $scriptFileName ..."
//
//    new File(scriptFileName).eachLine { String sqlStatement ->
//        lineCount++
//        log.trace "Processing: '$sqlStatement'..."
//        sqlStatement = sqlStatement?.trim()
//        if (sqlStatement && !sqlStatement.isEmpty()) {
//            int len = sqlStatement.length()
//            if (!sqlStatement.startsWith('--')) {
//                // Not a comment
//
//                // Remove the ending ';' as the Sql.execute() method does not like it for INSERT statement!?
//                if (sqlStatement[len - 1] != ';') {
//                    // Unexpected statement format
//                    errorCount++
//                    String errorMsg = "No ';' found at the end of the statement: '$sqlStatement'"
//                    log.error errorMsg
//                    log.info "Proceeding..."
//                } else if (len < 2) {
//                    // Seems to be an empty statement
//                    String warnMsg = "Empty statement: '$sqlStatement'"
//                    log.trace warnMsg
//                    log.trace "Proceeding..."
//                } else {
//                    sqlStatement = sqlStatement[0..(len - 2)]
//                    log.trace "Execute: '${sqlStatement}'"
//                    try {
//                        sql.execute(sqlStatement)
//                        count++;
//                    } catch (e) {
//                        errorCount++
//                        String errorMsg = "An exception occurred at line $lineCount with statement '$sqlStatement': ${e.message}"
//                        log.error errorMsg
//                        log.info "Proceeding..."
//                    }
//                }
//            }
//        }
//    }
//
//    log.info "Execution of $scriptFileName done: $count statements executed; $errorCount error(s) encountered."
//    errorCount
//}
//
///**
// * Create the Security ROLEs, as well as the SYSTEM account if it does not already exist.
// *
// * The SYSTEM account is used by the system only. The account is permanently locked, and cannot be logged in to.
// */
//def createRolesAndSystemAccount() {
//    GrailsApplication grailsApplication = ctx.grailsApplication
//    assert grailsApplication != null
//    SecurityService securityService = ctx.securityService
//    assert securityService != null
//
//    // Create the roles if they don't exist.
//    def role = 'ROLE_SYSTEM'
//    def systemRole = Role.findByAuthority(role)
//    if (!systemRole) {
//        systemRole = securityService.save(new Role(authority: role))
//        log.info "Created role $systemRole"
//    } else {
//        log.info "Already created: Role $systemRole"
//    }
//
//    role = 'ROLE_ADMIN'
//    def adminRole = Role.findByAuthority(role)
//    if (!adminRole) {
//        adminRole = securityService.save(new Role(authority: role))
//        log.info "Created role $adminRole"
//    } else {
//        log.info "Already created: Role $adminRole"
//    }
//
//    role = 'ROLE_USER'
//    def userRole = Role.findByAuthority(role)
//    if (!userRole) {
//        userRole = securityService.save(new Role(authority: role))
//        log.info "Created role $userRole"
//    } else {
//        log.info "Already created: Role $userRole"
//    }
//
//    // System principal
//    def username = 'system'
//    def systemUser = User.findByUsername(username)
//    if (!systemUser) {
//        systemUser = new User(
//                username: username,
//                password: username, // The account is always locked, hence there is no login allowed.
//                firstName: 'The',
//                lastName: 'System',
//                email: grailsApplication.config.ffars?.admin?.system?.email_address ?: 'tbd@tbd.com',
//                accountLocked: true)
//        if (!securityService.save(systemUser)) {
//            throw new RuntimeException('Could not create the SYSTEM account!')
//        } else {
//            log.info "SYSTEM account created."
//        }
//        if (!securityService.save(new PrincipalRole(
//                principal: systemUser,
//                role: systemRole))) {
//            throw new RuntimeException('Could not grant the ROLE_SYSTEM role to the SYSTEM account!')
//        } else {
//            log.info "SYSTEM account granted with the ROLE_SYSTEM role."
//        }
//    } else {
//        log.info "SYSTEM account checked."
//    }
//}
//
///**
// * Load test users
// */
//def createTestUsers() {
//
//    log.info "---------- Create test users: BEGIN ----------"
//    int roleCount = 0
//    int userCount = 0
//
//    SecurityService securityService = ctx.securityService
//    assert securityService != null
//
//    // Create the roles if they don't exist.
//    def role = 'ROLE_ADMIN'
//    def adminRole = Role.findByAuthority(role)
//    if (!adminRole) {
//        adminRole = securityService.save(new Role(authority: role))
//        log.info "Created role $adminRole"
//        roleCount++
//    } else {
//        log.info "Already created: Role $adminRole"
//    }
//
//    role = 'ROLE_USER'
//    def userRole = Role.findByAuthority(role)
//    if (!userRole) {
//        userRole = securityService.save(new Role(authority: role))
//        log.info "Created role $userRole"
//        roleCount++
//    } else {
//        log.info "Already created: Role $userRole"
//    }
//
//    role = 'ROLE_REPORT_DATA_ENTRY'
//    def reportDataEntryRole = Role.findByAuthority(role)
//    if (!reportDataEntryRole) {
//        reportDataEntryRole = securityService.save(new Role(authority: role))
//        log.info "Created role $reportDataEntryRole"
//    } else {
//        log.info "Already created: Role $reportDataEntryRole"
//    }
//
//    role = 'ROLE_REPORT_REVIEW'
//    def reportReviewRole = Role.findByAuthority(role)
//    if (!reportReviewRole) {
//        reportReviewRole = securityService.save(new Role(authority: role))
//        log.info "Created role $reportReviewRole"
//    } else {
//        log.info "Already created: Role $reportReviewRole"
//    }
//
//    // Admin principal
//    def username = 'admin'
//    def adminUser = User.findByUsername(username)
//    if (!adminUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'The',
//                        lastName: 'Administrator',
//                        email: 'ffars_admin@epa.gov'),
//                [userRole, adminRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    // User principals: Ed and Colonel
//    username = 'kelleyc'
//    def userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Colonel',
//                        lastName: 'Kelley',
//                        email: 'kelley.colonel@epa.gov'),
//                [userRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'saboe'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Ed',
//                        lastName: 'Sabo',
//                        email: 'sabo.edward@epa.gov'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'dedjinoup'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Pascal',
//                        lastName: 'Dedjinou',
//                        email: 'Dedjinou.Pascal@epa.gov'),
//                [userRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'perkinsc'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Chad',
//                        lastName: 'Perkins',
//                        email: 'perkins.chaderick@epa.gov'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'rigaldiesb'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Bertrand',
//                        lastName: 'Rigaldies',
//                        email: 'bertrand_rigaldies@sra.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'stegurad'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Doran',
//                        lastName: 'Stegura',
//                        email: 'doran_stegura@sra.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'gardnerd'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Don',
//                        lastName: 'Gardner',
//                        email: 'don_gardner@sra.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'beebem'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Mary',
//                        lastName: 'Beebe',
//                        email: 'mary_beebe@sra.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'darbyr'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Roberta',
//                        lastName: 'Darby',
//                        email: 'darby.roberta@epa.gov'),
//                [userRole, reportDataEntryRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'nikhinsons'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Sergey',
//                        lastName: 'Nikhinson',
//                        email: 'sergey.nikhinson@cgifederal.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'rajeshc'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'CB',
//                        lastName: 'Rajesh',
//                        email: 'cb.rajesh@cgifederal.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'abieval'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Linera',
//                        lastName: 'Abieva',
//                        email: 'linera.abieva@cgifederal.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    username = 'muirc'
//    userUser = User.findByUsername(username)
//    if (!userUser) {
//        securityService.saveWithRoles(
//                new User(
//                        username: username,
//                        password: username,
//                        firstName: 'Chris',
//                        lastName: 'Muir',
//                        email: 'christopher.muir@cgifederal.com'),
//                [userRole, adminRole, reportReviewRole])
//        log.info "User $username created."
//        userCount++
//    } else {
//        log.info "Already created: User $username"
//    }
//
//    log.info "---------- Create test roles ($roleCount) and users ($userCount): END ----------"
//}
//
///**
// * Load the application's parameters
// */
//def loadParameters() {
//    GrailsApplication grailsApplication = ctx.grailsApplication
//    assert grailsApplication != null
//    if (!grailsApplication.config.ffars) {
//        log.warn "No FFARS configuration found! Default values will be used."
//    }
//
//    // Company ID and product ranges.
//    loadFfarsParametersFromConfig()
//}
//
///**
// * Load the default min/max values for the FFARS Company and Product IDs.
// *
// * The default values are loaded as parameters in the Parameter if they do not exist. Once the corresponding parameters
// * are created, their values are managed from the Admin UI.
// */
//def loadFfarsParametersFromConfig() {
//    GrailsApplication grailsApplication = ctx.grailsApplication
//    assert grailsApplication != null
//
//    // Get the paths and file names for the images and templates
//    String xsltRootDirectory = grailsApplication.config.ffars.report.setting.xslt.baseRootDirectory
//    String xsltLogo = grailsApplication.config.ffars.report.setting.xslt.logo
//    String xsltLogoForLetters = grailsApplication.config.ffars.report.setting.xslt.logoForLetters
//    String xsltSignature = grailsApplication.config.ffars.report.setting.xslt.signature
//    String otaqMonthlyReportTemplate = grailsApplication.config.ffars.report.setting.otaqMonthlyReportTemplate
//
//    // Get the file
//    File logoResourceFile = grailsApplication.mainContext.getResource("${xsltRootDirectory}/${xsltLogo}").file
//    File logoForLettersResourceFile = grailsApplication.mainContext.getResource("${xsltRootDirectory}/${xsltLogoForLetters}").file
//    File signatureResourceFile = grailsApplication.mainContext.getResource("${xsltRootDirectory}/${xsltSignature}").file
//    File otaqMonthlyReportTemplateFile = grailsApplication.mainContext.getResource("${xsltRootDirectory}/${otaqMonthlyReportTemplate}").file
//
//    // Convert binary image file to String data
//    String logo64Encoded = logoResourceFile.getBytes().encodeAsBase64().toString()
//    String logoForLetters64Encoded = logoForLettersResourceFile.getBytes().encodeAsBase64().toString()
//    String signatureBase64Encoded = signatureResourceFile.getBytes().encodeAsBase64().toString()
//
//
//    List<Map<String, String>> parameters = [
//
//            // System email
//            [
//                    name       : Parameter.eCatalog.FFARS_SYSTEM_EMAIL.name(),
//                    value      : "${grailsApplication.config.ffars?.admin?.system?.email_address ?: 'ffars_system@epa.gov'}",
//                    description: "FFARS System's email address"
//            ],
//
//            // Fuel Manufacturers parameters
//            [
//                    name       : Parameter.eCatalog.FUEL_MANUFACTURER_COMPANY_ID_MIN.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_manufacturer?.company?.id?.min ?: 5000}",
//                    description: 'Fuel Manufacturer Company ID min value'
//            ],
//            [
//                    name       : Parameter.eCatalog.FUEL_MANUFACTURER_COMPANY_ID_MAX.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_manufacturer?.company?.id?.max ?: 9997}",
//                    description: 'Fuel Manufacturer Company ID max value'
//            ],
//            [
//                    name       : Parameter.eCatalog.FUEL_MANUFACTURER_PRODUCT_SEQUENCE_MIN.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_manufacturer?.product?.sequence?.min ?: 0}",
//                    description: 'Fuel Manufacturer fuel product ID min value'
//            ],
//            [
//                    name       : Parameter.eCatalog.FUEL_MANUFACTURER_PRODUCT_SEQUENCE_MAX.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_manufacturer?.product?.sequence?.max ?: 99}",
//                    description: 'Fuel Manufacturer fuel product ID max value'
//            ],
//
//            // Fuel Additive Manufacturers parameters
//            [
//                    name       : Parameter.eCatalog.FUEL_ADDITIVE_MANUFACTURER_COMPANY_ID_MIN.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_additive_manufacturer?.company?.id?.min ?: 1}",
//                    description: 'Fuel Additive Manufacturer Company ID min value'
//            ],
//            [
//                    name       : Parameter.eCatalog.FUEL_ADDITIVE_MANUFACTURER_COMPANY_ID_MAX.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_additive_manufacturer?.company?.id?.max ?: 4999}",
//                    description: 'Fuel Additive Manufacturer Company ID max value'
//            ],
//            [
//                    name       : Parameter.eCatalog.FUEL_ADDITIVE_MANUFACTURER_PRODUCT_SEQUENCE_MIN.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_additive_manufacturer?.product?.sequence?.min ?: 1000}",
//                    description: 'Fuel Additive Manufacturer fuel product ID min value'
//            ],
//            [
//                    name       : Parameter.eCatalog.FUEL_ADDITIVE_MANUFACTURER_PRODUCT_SEQUENCE_MAX.name(),
//                    value      : "${grailsApplication.config.ffars?.fuel_additive_manufacturer?.product?.sequence?.max ?: 9999}",
//                    description: 'Fuel Additive Manufacturer fuel product ID max value'
//            ],
//
//            // Registration sequence parameters
//            [
//                    name       : Parameter.eCatalog.REGISTRATION_GET_NEXT_SEQUENCE_NUMBER_RETRIES.name(),
//                    value      : "${grailsApplication.config.ffars?.registration?.sequence?.get_next_sequence_number_max_retries ?: 10}",
//                    description: 'max number of re-tries to obtain the next registration number'
//            ],
//            [
//                    name       : Parameter.eCatalog.REGISTRATION_SEQUENCE_MAX_VALUE.name(),
//                    value      : "${grailsApplication.config.ffars?.registration?.sequence?.max_value ?: 9900}",
//                    description: 'Fuel and Fuel Additive ID sequence number maximum value'
//            ],
//
//            // QA Checks parameters
//            [
//                    name       : Parameter.eCatalog.QACHECK_PERCENT_SINGLE_MIN_EXCLUSIVE.name(),
//                    value      : "${grailsApplication.config.ffars?.qacheck?.percent?.single?.min_exclusive ?: 0}",
//                    description: 'Minimum value (exclusive) of a single percentage number'
//            ],
//            [
//                    name       : Parameter.eCatalog.QACHECK_PERCENT_SINGLE_MAX_INCLUSIVE.name(),
//                    value      : "${grailsApplication.config.ffars?.qacheck?.percent?.single?.max_inclusive ?: 100}",
//                    description: 'Maximum value (inclusive) of a single percentage number'
//            ],
//            [
//                    name       : Parameter.eCatalog.QACHECK_PERCENT_SUM_MIN_INCLUSIVE.name(),
//                    value      : "${grailsApplication.config.ffars?.qacheck?.percent?.sum?.min_inclusive ?: 98}",
//                    description: 'Minimum value (inclusive) of a sum of percentage numbers that must be equal to 100%'
//            ],
//            [
//                    name       : Parameter.eCatalog.QACHECK_PERCENT_SUM_MAX_INCLUSIVE.name(),
//                    value      : "${grailsApplication.config.ffars?.qacheck?.percent?.sum?.max_inclusive ?: 102}",
//                    description: 'Maximum value (inclusive) of a sum of percentage numbers that must be equal to 100%'
//            ],
//
//            // Report and Letter parameters
//            [
//                    name       : Parameter.eCatalog.EPA_LOGO.name(),
//                    binaryValue: logo64Encoded,
//                    description: 'The EPA logo image base 64 encoded as a string'
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_LOGO_FOR_LETTERS.name(),
//                    binaryValue: logoForLetters64Encoded,
//                    description: 'The EPA logo image for letters base 64 encoded as a string'
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_SIGNATURE.name(),
//                    binaryValue: signatureBase64Encoded,
//                    description: 'The EPA signature image base 64 encoded as a string'
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_TITLE.name(),
//                    value      : 'UNITED STATES ENVIRONMENTAL PROTECTION AGENCY',
//                    description: "The EPA's official title"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_CITY_AND_ZIP.name(),
//                    value      : 'WASHINGTON, D.C. 20460',
//                    description: "The EPA's city and zip code"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_SYSTEM.name(),
//                    value      : 'Fuel & Fuel Additive Registration Program (6405A)',
//                    description: "The EPA system responsible for sending the letters"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_NOTIFICATION_SIGNER_DEFAULT_PREFIX.name(),
//                    value      : 'Sir/Madam',
//                    description: "The default prefix to use in the salutation of the letter when the signer of the notification does not have a prefix defined"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_SALUTATION.name(),
//                    value      : 'Dear',
//                    description: "The salutation for the letter"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_VALEDICTION.name(),
//                    value      : 'Sincerely,',
//                    description: "The valediction for the letter"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_SIGNERS_NAME.name(),
//                    value      : 'Byron J. Bunker',
//                    description: "The name of the person signing the letters from the EPA"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_SIGNERS_TITLE.name(),
//                    value      : 'Director',
//                    description: "The title of the person signing the letters from the EPA"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_SIGNERS_DIVISION.name(),
//                    value      : 'Compliance Division',
//                    description: "The division of the person signing the letters from the EPA"
//            ],
//            [
//                    name       : Parameter.eCatalog.PLEASE_CALL_PHONE_NUMBER.name(),
//                    value      : '(202) 343-9648',
//                    description: "The phone number put in the letter that the manufacturer can call for help"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_URL.name(),
//                    value      : 'Internet Address (URL) &#8226; http://www.epa.gov', // &#8226; Unicode for a bullet (i.e., round dot).
//                    description: "The footer for the letter"
//            ],
//            [
//                    name       : Parameter.eCatalog.LETTER_FOOTER.name(),
//                    value      : 'Recycled/Recyclable &#8226; Printed with Vegetable Oil Based Inks on 100% Postconsumer Process Chlorine Free Recycled Paper', // &#8226; Unicode for a bullet (i.e., round dot).
//                    description: "The footer for the letter"
//            ],
//            [
//                    name       : Parameter.eCatalog.OTAQ_MONTHLY_REPORT_TEMPLATE.name(),
//                    binaryValue: otaqMonthlyReportTemplateFile.text,
//                    description: "The XML/HTML template for generating OTAQ monthly reports"
//            ],
//            [
//                    name       : Parameter.eCatalog.OTAQ_MONTHLY_REPORT_SEARCH_BUTTON.name(),
//                    value      : '<BUTTON id="searchbutton" type="submit" title="Search"></BUTTON>',
//                    description: "The HTML search button element with an explicit closing tag"
//            ],
//            [
//                    name       : Parameter.eCatalog.OTAQ_MONTHLY_REPORT_SCRIPT_JQUERY.name(),
//                    value      : '<SCRIPT type="text/javascript" src="http://www.epa.gov/epafiles/js/third-party/jquery.js"></SCRIPT>',
//                    description: "The HTML JQuery script element with an explicit closing tag"
//            ],
//            [
//                    name       : Parameter.eCatalog.OTAQ_MONTHLY_REPORT_SCRIPT_EPA_CORE.name(),
//                    value      : '<SCRIPT type="text/javascript" src="http://www.epa.gov/epafiles/js/epa-core-v4.js"></SCRIPT>',
//                    description: "The HTML EPA core JavaScript script element with an explicit closing tag"
//            ],
//            //Specific for Routing Slip
//            [
//                    name       : Parameter.eCatalog.EPA_OFFICE_LINE_1.name(),
//                    value      : 'OFFICE OF',
//                    description: "The first part of the EPA's office name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_OFFICE_LINE_2.name(),
//                    value      : 'TRANSPORTATION',
//                    description: "The second part of the EPA's office name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_OFFICE_LINE_3.name(),
//                    value      : 'AND AIR QUALITY',
//                    description: "The third part of the EPA's office name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_DIVISION_LINE_1.name(),
//                    value      : 'TRANSPORTATION AND',
//                    description: "The first part of the EPA's division name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_DIVISION_LINE_2.name(),
//                    value      : 'REGIONAL PROGRAMS',
//                    description: "The second part of the EPA's division name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_DIVISION_LINE_3.name(),
//                    value      : 'DIVISION',
//                    description: "The third part of the EPA's division name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_GROUP_LINE_1.name(),
//                    value      : 'TECHNICAL',
//                    description: "The first part of the EPA's group name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_GROUP_LINE_2.name(),
//                    value      : 'ANALYSIS',
//                    description: "The second part of the EPA's group name"
//            ],
//            [
//                    name       : Parameter.eCatalog.EPA_GROUP_LINE_3.name(),
//                    value      : 'GROUP',
//                    description: "The third part of the EPA's group name"
//            ],
//            [
//                    name       : Parameter.eCatalog.SRA_TITLE.name(),
//                    value      : 'SRA International Inc.',
//                    description: "SRA Title"
//            ],
//            [
//                    name       : Parameter.eCatalog.SRA_FAX.name(),
//                    value      : '(202) 343-2825',
//                    description: "The SRA fax number"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_1.name(),
//                    value      : 'Jose Solar',
//                    description: "First Recipient Name"
//
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_2.name(),
//                    value      : 'Jim Caldwell',
//                    description: "Second Recipient Name"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_3.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Third Recipient Name"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_4.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Fourth Recipient Name"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_5.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Fifth Recipient Name"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_6.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Sixth Recipient Name"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_7.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Seventh Recipient Name"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_1_ACTION.name(),
//                    value      : 'X',
//                    description: "Action Value for the recipient"
//
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_2_ACTION.name(),
//                    value      : 'X',
//                    description: "Action Value for the recipient"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_3_ACTION.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Action Value for the recipient"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_4_ACTION.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Action Value for the recipient"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_5_ACTION.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Action Value for the recipient"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_6_ACTION.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Action Value for the recipient"
//            ],
//            [
//                    name       : Parameter.eCatalog.ROUTING_RECIPIENT_7_ACTION.name(),
//                    value      : '',  //Currently blank but added a row in the database to add a name
//                    description: "Action Value for the recipient"
//            ],
//            [
//                    name       : Parameter.eCatalog.FIRST_YEAR.name(),
//                    value      : '1975',
//                    description: "First year in the legacy FFARS database for reports"
//            ],
//            // Reports
//            [
//                    name       : Parameter.eCatalog.FUEL_QUARTERLY_PRODUCTION_MAX.name(),
//                    value      : "999999999999999",
//                    description: 'Fuel Quarterly Production max value'
//            ],
//            [
//                    name       : Parameter.eCatalog.FUEL_ADDITIVE_ANNUAL_PRODUCTION_MAX.name(),
//                    value      : "999999999999",
//                    description: 'Fuel Additive Annual Production max value'
//            ],
//
//
//    ]
//
//    parameters.each { Map<String, String> param ->
//        createParameterIfNotExists(param.name, param.value, param.binaryValue, param.description)
//    }
//}
//
///**
// * Create a parameter with a startup/default value if it does not exist.
// * @param parameterName Name of the parameter to create
// * @param parameterValue Parameter's default value
// * @param parameterBinaryValue Parameter's default binary value as a blob (used when parameter value will not fit into a VARCHAR2(255 CHAR)
// * @param parameterDescription Parameter's description
// */
//def createParameterIfNotExists(String parameterName, String parameterValue, String parameterBinaryValue, String parameterDescription) {
//    ParameterService parameterService = ctx.parameterService
//    assert parameterService != null
//
//    if (!Parameter.findByName(parameterName)) {
//        // Create the parameter
//        SpringSecurityUtils.doWithAuth('system') {
//            if (parameterService.create(parameterName, parameterValue, parameterBinaryValue, parameterDescription)) {
//                log.debug "Parameter $parameterName=$parameterValue created."
//            } else {
//                throw new RuntimeException("The parameter '$parameterName' was not created.")
//            }
//        }
//    } else {
//        log.debug "Read parameter $parameterName=$parameterValue created."
//    }
//}
//
///**
// * Initialize sequence generators.
// */
//def initializeSequenceGenerators() {
//    // List of sequence generators to initialize based on parameters
//    [
//            // Initialize the Fuel and Fuel Additive Manufacturers' starting Company IDs
//            [generator: 'seq_fuel_company_id', parameter: Parameter.eCatalog.FUEL_MANUFACTURER_COMPANY_ID_MIN.name()],
//            [generator: 'seq_fuel_additive_company_id', parameter: Parameter.eCatalog.FUEL_ADDITIVE_MANUFACTURER_COMPANY_ID_MIN.name()],
//
//            // Add others if necessary...
//            // [generator: <sequence generator name>, parameter: <parameter name>]
//
//    ].each { Map sequence ->
//        String sequenceName = sequence.generator
//        String sequenceParameter = sequence.parameter
//        Parameter parameter = Parameter.get(sequenceParameter)
//        if (!parameter) {
//            throw new RuntimeException("Parameter $sequenceParameter' not found")
//        }
//        // The sequence is assumed to be at starting value of 1.
//        int sequenceStartValue = (parameter.value as int) - 1
//        log.debug "Initializing sequence $sequenceName to start value $sequenceStartValue (Parameter $sequenceParameter) ..."
//        [
//                "ALTER SEQUENCE $sequenceName INCREMENT BY $sequenceStartValue",
//                "SELECT ${sequenceName}.NEXTVAL FROM DUAL",
//                "ALTER SEQUENCE $sequenceName INCREMENT BY 1",
//
//        ].each { String sqlStatement ->
//            try {
//                log.debug "Executing SQL statement: '$sqlStatement'"
//                sql.execute(sqlStatement)
//            } catch (e) {
//                log.error "An error occurred while attempting to execute SQL statement '$sqlStatement': ${e.message}"
//            }
//        }
//        log.debug "Sequence $sequenceName initialized to ${parameter.value}."
//    }
//}